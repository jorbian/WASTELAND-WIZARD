# WASTELAND WIZARD

## MINIMUM VIABLE PRODUCT

If we have nothing else done by next Thursday, we can have a GUI editor
which can create and edit JSON and/or [YAML](https://en.wikipedia.org/wiki/YAML) or even
(.ini)(https://en.wikipedia.org/wiki/INI_file) files -- since we're targeting Windows -- which end up with
the right data in the right order whether or not we have anything to pass it to that can actually
edit the binary. One of the goals of using an Object-oriented design pattern is to allow, potentially,
different parts of the application to be able to function independentently of each other or in
different contexts entirely. If all else fails, I could probably bang out a Python script which edits the
actual binary of the file the night before and be just fine.

### TO-DO LIST

- [ ] Pick an intermediate file format and the library we're going to use to edit it.
    - (cJSON)[https://github.com/DaveGamble/cJSON] seems to be a popular choice. But (this)[https://nlohmann.github.io/json/]
    is the one that I'm most familiar with and have actually encountered before 'in the wild.'
    - I have never actually used YAML before at all but it does have some important advantages over json that have made
    me curious. (This)[https://github.com/tlsa/libcyaml] was the first library I found and is at least worth some
    consideration.
    - Compiling with a library isn't THAT hard and I can walk you through it if you like me to. Getting the makefile to
    do it the right way is actually the hardest part 
- [ ] Settle on the data structure our we will use, what fields need to be there and in what order.
- [ ] Get the forms designed and working properly. All that's important is that -- not matter what the user
sees the data makes it into the JSON, YAML, or whatever in the correct format to where it's ready to go.
- [ ] Decide what ground we can still cover with whatever time we have left.

## STRETCH GOALS

It wouldn't be that hard to put more time into this in order to make it fully functional.

### TO-DO LIST

- [ ] Figure out how to actually edit the .sav data binaries themselves to where the game will actually load them.
Prioritizing the SPECIAL stats and calling it good is perfectly fine (at least for now)
- [ ] Figure out an easy and reliable way to 'inflate' data that has been 'deflated' (i.e. compressed) using
[zlib](https://en.wikipedia.org/wiki/Zlib):
    - This would unlock for us, among other things, the games art assets
    and other data (stored in the files 'master.dat,' 'critters.dat' and a couple of others). This would allow us
    to flesh out the UX into something Fallout modders could really use. 
    - A utilty that can do this out of the box doesn't actually seem to exist, even if the pieces to make one are
    commone enough. Being able to create one or to fork gzip or something like that and add the ability to do it
    would be something other devs could use in the real world tomorrow and definitely something I'd love to put on
    a resume.
- [ ] At least LOOK at the native Win32 API for the forms.
- [ ] Experiment with using Microsoft's build tools -- again, since we're targeting Windows.
- [ ] Tighten the screws to make the editor more 'general' for Fallout 1 and anything else we could